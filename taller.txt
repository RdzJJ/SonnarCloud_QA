Taller de Identificación y Resolución de Hallazgos de Calidad de Software en SonarCloud. Equipos de máximo 3 personas.

El objetivo es desarrollar capacidad para analizar calidad de software mediante SonarCloud y generar al menos 5 tipos de hallazgos distintos: New Issue, Maintainability, Duplications, Coverage y Reliability. Luego comprender las causas de cada hallazgo y aplicar estrategias de resolución.

Primero debes crear un repositorio en GitHub con un proyecto sencillo en cualquier lenguaje soportado por SonarCloud como Java, Python o JavaScript. Conecta el repositorio a SonarCloud usando la guía de integración con GitHub Actions.

Luego introduce intencionalmente código que genere los 5 tipos de hallazgos requeridos. Para New Issue sube código con mala práctica o error nuevo como una variable sin usar. Para Maintainability crea funciones demasiado largas o mal nombradas. Para Duplications copia métodos con la misma lógica. Para Coverage omite pruebas unitarias o déjalas incompletas. Para Reliability genera código que pueda provocar errores en ejecución como dividir por cero sin validación.

Sube el código al repositorio y espera la ejecución automática del análisis en SonarCloud. Accede al panel de resultados y captura evidencia de los hallazgos detectados.

Después corrige el código para cada caso identificado. Aplica refactorización para mejorar mantenibilidad. Elimina duplicación. Crea pruebas unitarias para aumentar cobertura. Agrega validaciones para mejorar confiabilidad. Realiza ajustes generales para evitar nuevos issues.

Debes entregar un documento con evidencia en capturas de pantalla de los 5 hallazgos iniciales en SonarCloud. Explica las causas que originaron cada hallazgo. Explica las acciones de corrección aplicadas. Muestra evidencia del nuevo análisis en SonarCloud demostrando la reducción o eliminación de los hallazgos. Incluye conclusiones personales sobre la importancia de usar herramientas de calidad de software.

Explicación de causas y soluciones. New Issue aparece cuando introduces un nuevo error, mala práctica o vulnerabilidad. Ejemplo variable declarada y no usada. Resolución eliminar o usar correctamente la variable. Maintainability ocurre por código difícil de leer o mantener como métodos muy largos, nombres confusos o complejidad alta. Ejemplo un método con más de 50 líneas mezclando varias responsabilidades. Resolución dividir en funciones más pequeñas aplicando principios de Clean Code. Duplications se da por fragmentos de código repetidos en varias partes. Ejemplo tres métodos que retornan el mismo mensaje. Resolución extraer la lógica repetida en un método reutilizable. Coverage ocurre por falta de pruebas unitarias. Ejemplo funciones críticas sin test. Resolución implementar pruebas automatizadas con JUnit, pytest o Jest para cubrir los casos. Reliability se da por posibles fallas en tiempo de ejecución. Ejemplo división por cero o acceso a índices inexistentes en un arreglo. Resolución agregar validaciones o manejo de excepciones.

Rúbrica de evaluación. Cumplimiento de hallazgos. Excelente evidencia clara de los 5 hallazgos solicitados con ejemplos bien documentados. Bueno evidencia de 4 hallazgos. Aceptable evidencia de 3 hallazgos. Insuficiente menos de 3 hallazgos o sin claridad. Manejo de la herramienta. Excelente uso correcto de SonarCloud, integración completa con GitHub Actions y reportes claros. Bueno uso adecuado de SonarCloud con pocos errores de configuración. Aceptable uso parcial o incompleto de SonarCloud. Insuficiente no logra configurar ni ejecutar análisis. Sustentación. Excelente explica claramente causas, correcciones y conclusiones bien argumentadas. Bueno explica causas y correcciones de manera aceptable con conclusiones básicas. Aceptable explica parcialmente las causas y soluciones sin mucha reflexión. Insuficiente no explica ni justifica adecuadamente.